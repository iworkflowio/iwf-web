/* tslint:disable */
/* eslint-disable */
/**
 * Workflow APIs
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BasicInfo
 */
export interface BasicInfo {
    /**
     * 
     * @type {string}
     * @memberof BasicInfo
     */
    'iwfWorkflowType'?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicInfo
     */
    'iwfWorkerUrl'?: string;
}
/**
 * 
 * @export
 * @interface ChannelInfo
 */
export interface ChannelInfo {
    /**
     * 
     * @type {number}
     * @memberof ChannelInfo
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ChannelRequestStatus = {
    Waiting: 'WAITING',
    Received: 'RECEIVED'
} as const;

export type ChannelRequestStatus = typeof ChannelRequestStatus[keyof typeof ChannelRequestStatus];


/**
 * 
 * @export
 * @interface CommandCombination
 */
export interface CommandCombination {
    /**
     * 
     * @type {Array<string>}
     * @memberof CommandCombination
     */
    'commandIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CommandRequest
 */
export interface CommandRequest {
    /**
     * 
     * @type {DeciderTriggerType}
     * @memberof CommandRequest
     */
    'deciderTriggerType'?: DeciderTriggerType;
    /**
     * 
     * @type {CommandWaitingType}
     * @memberof CommandRequest
     */
    'commandWaitingType'?: CommandWaitingType;
    /**
     * 
     * @type {Array<TimerCommand>}
     * @memberof CommandRequest
     */
    'timerCommands'?: Array<TimerCommand>;
    /**
     * 
     * @type {Array<SignalCommand>}
     * @memberof CommandRequest
     */
    'signalCommands'?: Array<SignalCommand>;
    /**
     * 
     * @type {Array<InterStateChannelCommand>}
     * @memberof CommandRequest
     */
    'interStateChannelCommands'?: Array<InterStateChannelCommand>;
    /**
     * 
     * @type {Array<CommandCombination>}
     * @memberof CommandRequest
     */
    'commandCombinations'?: Array<CommandCombination>;
}


/**
 * 
 * @export
 * @interface CommandResults
 */
export interface CommandResults {
    /**
     * 
     * @type {Array<SignalResult>}
     * @memberof CommandResults
     */
    'signalResults'?: Array<SignalResult>;
    /**
     * 
     * @type {Array<InterStateChannelResult>}
     * @memberof CommandResults
     */
    'interStateChannelResults'?: Array<InterStateChannelResult>;
    /**
     * 
     * @type {Array<TimerResult>}
     * @memberof CommandResults
     */
    'timerResults'?: Array<TimerResult>;
    /**
     * 
     * @type {boolean}
     * @memberof CommandResults
     */
    'stateStartApiSucceeded'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CommandWaitingType = {
    AllCompleted: 'ALL_COMPLETED',
    AnyCompleted: 'ANY_COMPLETED',
    AnyCombinationCompleted: 'ANY_COMBINATION_COMPLETED'
} as const;

export type CommandWaitingType = typeof CommandWaitingType[keyof typeof CommandWaitingType];


/**
 * 
 * @export
 * @interface Context
 */
export interface Context {
    /**
     * 
     * @type {string}
     * @memberof Context
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof Context
     */
    'workflowRunId': string;
    /**
     * 
     * @type {number}
     * @memberof Context
     */
    'workflowStartedTimestamp': number;
    /**
     * 
     * @type {string}
     * @memberof Context
     */
    'stateExecutionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof Context
     */
    'firstAttemptTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof Context
     */
    'attempt'?: number;
}
/**
 * 
 * @export
 * @interface ContinueAsNewDumpResponse
 */
export interface ContinueAsNewDumpResponse {
    /**
     * StatesToStartFromBeginning means they haven\'t started in the previous run
     * @type {Array<StateMovement>}
     * @memberof ContinueAsNewDumpResponse
     */
    'statesToStartFromBeginning'?: Array<StateMovement>;
    /**
     * stateExeId to StateExecutionResumeInfo
     * @type {{ [key: string]: StateExecutionResumeInfo; }}
     * @memberof ContinueAsNewDumpResponse
     */
    'stateExecutionsToResume'?: { [key: string]: StateExecutionResumeInfo; };
    /**
     * 
     * @type {{ [key: string]: Array<EncodedObject>; }}
     * @memberof ContinueAsNewDumpResponse
     */
    'interStateChannelReceived'?: { [key: string]: Array<EncodedObject>; };
    /**
     * 
     * @type {{ [key: string]: Array<EncodedObject>; }}
     * @memberof ContinueAsNewDumpResponse
     */
    'signalsReceived'?: { [key: string]: Array<EncodedObject>; };
    /**
     * 
     * @type {StateExecutionCounterInfo}
     * @memberof ContinueAsNewDumpResponse
     */
    'stateExecutionCounterInfo'?: StateExecutionCounterInfo;
    /**
     * 
     * @type {Array<StateCompletionOutput>}
     * @memberof ContinueAsNewDumpResponse
     */
    'stateOutputs'?: Array<StateCompletionOutput>;
    /**
     * 
     * @type {Array<StaleSkipTimerSignal>}
     * @memberof ContinueAsNewDumpResponse
     */
    'staleSkipTimerSignals'?: Array<StaleSkipTimerSignal>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof ContinueAsNewDumpResponse
     */
    'dataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof ContinueAsNewDumpResponse
     */
    'searchAttributes'?: Array<SearchAttribute>;
}
/**
 * 
 * @export
 * @interface ContinueAsNewInput
 */
export interface ContinueAsNewInput {
    /**
     * For loading from previous run
     * @type {string}
     * @memberof ContinueAsNewInput
     */
    'previousInternalRunId': string;
}
/**
 * 
 * @export
 * @interface DebugDumpResponse
 */
export interface DebugDumpResponse {
    /**
     * 
     * @type {WorkflowConfig}
     * @memberof DebugDumpResponse
     */
    'config'?: WorkflowConfig;
    /**
     * 
     * @type {ContinueAsNewDumpResponse}
     * @memberof DebugDumpResponse
     */
    'snapshot'?: ContinueAsNewDumpResponse;
    /**
     * 
     * @type {Array<number>}
     * @memberof DebugDumpResponse
     */
    'firingTimersUnixTimestamps'?: Array<number>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DeciderTriggerType = {
    AllCommandCompleted: 'ALL_COMMAND_COMPLETED',
    AnyCommandCompleted: 'ANY_COMMAND_COMPLETED',
    AnyCommandCombinationCompleted: 'ANY_COMMAND_COMBINATION_COMPLETED'
} as const;

export type DeciderTriggerType = typeof DeciderTriggerType[keyof typeof DeciderTriggerType];


/**
 * 
 * @export
 * @interface EncodedObject
 */
export interface EncodedObject {
    /**
     * 
     * @type {string}
     * @memberof EncodedObject
     */
    'encoding'?: string;
    /**
     * 
     * @type {string}
     * @memberof EncodedObject
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'detail'?: string;
    /**
     * 
     * @type {ErrorSubStatus}
     * @memberof ErrorResponse
     */
    'subStatus'?: ErrorSubStatus;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'originalWorkerErrorDetail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'originalWorkerErrorType'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'originalWorkerErrorStatus'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ErrorSubStatus = {
    UncategorizedSubStatus: 'UNCATEGORIZED_SUB_STATUS',
    WorkflowAlreadyStartedSubStatus: 'WORKFLOW_ALREADY_STARTED_SUB_STATUS',
    WorkflowNotExistsSubStatus: 'WORKFLOW_NOT_EXISTS_SUB_STATUS',
    WorkerApiError: 'WORKER_API_ERROR',
    LongPollTimeOutSubStatus: 'LONG_POLL_TIME_OUT_SUB_STATUS'
} as const;

export type ErrorSubStatus = typeof ErrorSubStatus[keyof typeof ErrorSubStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const EventType = {
    StateExecuteAttemptFailEvent: 'STATE_EXECUTE_ATTEMPT_FAIL_EVENT',
    StateExecuteAttemptSuccEvent: 'STATE_EXECUTE_ATTEMPT_SUCC_EVENT',
    StateExecuteEeCompleteEvent: 'STATE_EXECUTE_EE_COMPLETE_EVENT',
    StateExecuteEeFailEvent: 'STATE_EXECUTE_EE_FAIL_EVENT',
    StateExecuteEeStartEvent: 'STATE_EXECUTE_EE_START_EVENT',
    StateWaitUntilAttemptFailEvent: 'STATE_WAIT_UNTIL_ATTEMPT_FAIL_EVENT',
    StateWaitUntilAttemptSuccEvent: 'STATE_WAIT_UNTIL_ATTEMPT_SUCC_EVENT',
    StateWaitUntilEeCompleteEvent: 'STATE_WAIT_UNTIL_EE_COMPLETE_EVENT',
    StateWaitUntilEeFailEvent: 'STATE_WAIT_UNTIL_EE_FAIL_EVENT',
    StateWaitUntilEeStartEvent: 'STATE_WAIT_UNTIL_EE_START_EVENT',
    WorkflowCompleteEvent: 'WORKFLOW_COMPLETE_EVENT',
    WorkflowFailEvent: 'WORKFLOW_FAIL_EVENT',
    WorkflowStartEvent: 'WORKFLOW_START_EVENT',
    RpcExecutionEvent: 'RPC_EXECUTION_EVENT'
} as const;

export type EventType = typeof EventType[keyof typeof EventType];


/**
 * 
 * @export
 * @enum {string}
 */

export const ExecuteApiFailurePolicy = {
    FailWorkflowOnExecuteApiFailure: 'FAIL_WORKFLOW_ON_EXECUTE_API_FAILURE',
    ProceedToConfiguredState: 'PROCEED_TO_CONFIGURED_STATE'
} as const;

export type ExecuteApiFailurePolicy = typeof ExecuteApiFailurePolicy[keyof typeof ExecuteApiFailurePolicy];


/**
 * 
 * @export
 * @interface ExecuteRpcSignalRequest
 */
export interface ExecuteRpcSignalRequest {
    /**
     * 
     * @type {EncodedObject}
     * @memberof ExecuteRpcSignalRequest
     */
    'rpcInput'?: EncodedObject;
    /**
     * 
     * @type {EncodedObject}
     * @memberof ExecuteRpcSignalRequest
     */
    'rpcOutput'?: EncodedObject;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof ExecuteRpcSignalRequest
     */
    'upsertDataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof ExecuteRpcSignalRequest
     */
    'upsertSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {StateDecision}
     * @memberof ExecuteRpcSignalRequest
     */
    'stateDecision'?: StateDecision;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof ExecuteRpcSignalRequest
     */
    'recordEvents'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<InterStateChannelPublishing>}
     * @memberof ExecuteRpcSignalRequest
     */
    'interStateChannelPublishing'?: Array<InterStateChannelPublishing>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ExecutingStateIdMode = {
    EnabledForAll: 'ENABLED_FOR_ALL',
    EnabledForStatesWithWaitUntil: 'ENABLED_FOR_STATES_WITH_WAIT_UNTIL',
    Disabled: 'DISABLED'
} as const;

export type ExecutingStateIdMode = typeof ExecutingStateIdMode[keyof typeof ExecutingStateIdMode];


/**
 * 
 * @export
 * @interface FailWorkflowSignalRequest
 */
export interface FailWorkflowSignalRequest {
    /**
     * 
     * @type {string}
     * @memberof FailWorkflowSignalRequest
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface GetCurrentTimerInfosQueryResponse
 */
export interface GetCurrentTimerInfosQueryResponse {
    /**
     * 
     * @type {{ [key: string]: Array<TimerInfo>; }}
     * @memberof GetCurrentTimerInfosQueryResponse
     */
    'stateExecutionCurrentTimerInfos'?: { [key: string]: Array<TimerInfo>; };
}
/**
 * 
 * @export
 * @interface GetDataAttributesQueryRequest
 */
export interface GetDataAttributesQueryRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetDataAttributesQueryRequest
     */
    'keys'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetDataAttributesQueryResponse
 */
export interface GetDataAttributesQueryResponse {
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof GetDataAttributesQueryResponse
     */
    'dataAttributes'?: Array<KeyValue>;
}
/**
 * 
 * @export
 * @interface GetScheduledGreedyTimerTimesQueryResponse
 */
export interface GetScheduledGreedyTimerTimesQueryResponse {
    /**
     * 
     * @type {Array<TimerInfo>}
     * @memberof GetScheduledGreedyTimerTimesQueryResponse
     */
    'pendingScheduled'?: Array<TimerInfo>;
}
/**
 * 
 * @export
 * @interface HealthInfo
 */
export interface HealthInfo {
    /**
     * 
     * @type {string}
     * @memberof HealthInfo
     */
    'condition'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthInfo
     */
    'hostname'?: string;
    /**
     * 
     * @type {number}
     * @memberof HealthInfo
     */
    'duration'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IDReusePolicy = {
    AllowIfPreviousExistsAbnormally: 'ALLOW_IF_PREVIOUS_EXISTS_ABNORMALLY',
    AllowIfPreviousExitsAbnormally: 'ALLOW_IF_PREVIOUS_EXITS_ABNORMALLY',
    AllowIfNoRunning: 'ALLOW_IF_NO_RUNNING',
    DisallowReuse: 'DISALLOW_REUSE',
    AllowTerminateIfRunning: 'ALLOW_TERMINATE_IF_RUNNING'
} as const;

export type IDReusePolicy = typeof IDReusePolicy[keyof typeof IDReusePolicy];


/**
 * 
 * @export
 * @interface InterStateChannelCommand
 */
export interface InterStateChannelCommand {
    /**
     * 
     * @type {string}
     * @memberof InterStateChannelCommand
     */
    'commandId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InterStateChannelCommand
     */
    'channelName': string;
    /**
     * 
     * @type {number}
     * @memberof InterStateChannelCommand
     */
    'atLeast'?: number;
    /**
     * 
     * @type {number}
     * @memberof InterStateChannelCommand
     */
    'atMost'?: number;
}
/**
 * 
 * @export
 * @interface InterStateChannelPublishing
 */
export interface InterStateChannelPublishing {
    /**
     * 
     * @type {string}
     * @memberof InterStateChannelPublishing
     */
    'channelName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof InterStateChannelPublishing
     */
    'value'?: EncodedObject;
}
/**
 * 
 * @export
 * @interface InterStateChannelResult
 */
export interface InterStateChannelResult {
    /**
     * 
     * @type {string}
     * @memberof InterStateChannelResult
     */
    'commandId': string;
    /**
     * 
     * @type {ChannelRequestStatus}
     * @memberof InterStateChannelResult
     */
    'requestStatus': ChannelRequestStatus;
    /**
     * 
     * @type {string}
     * @memberof InterStateChannelResult
     */
    'channelName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof InterStateChannelResult
     */
    'value'?: EncodedObject;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const InternalTimerStatus = {
    Pending: 'Pending',
    Fired: 'Fired',
    Skipped: 'Skipped'
} as const;

export type InternalTimerStatus = typeof InternalTimerStatus[keyof typeof InternalTimerStatus];


/**
 * 
 * @export
 * @interface InterpreterWorkflowInput
 */
export interface InterpreterWorkflowInput {
    /**
     * 
     * @type {string}
     * @memberof InterpreterWorkflowInput
     */
    'iwfWorkflowType'?: string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterWorkflowInput
     */
    'iwfWorkerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof InterpreterWorkflowInput
     */
    'startStateId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InterpreterWorkflowInput
     */
    'waitForCompletionStateExecutionIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InterpreterWorkflowInput
     */
    'waitForCompletionStateIds'?: Array<string>;
    /**
     * 
     * @type {EncodedObject}
     * @memberof InterpreterWorkflowInput
     */
    'stateInput'?: EncodedObject;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof InterpreterWorkflowInput
     */
    'stateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof InterpreterWorkflowInput
     */
    'initSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof InterpreterWorkflowInput
     */
    'initDataAttributes'?: Array<KeyValue>;
    /**
     * 
     * @type {boolean}
     * @memberof InterpreterWorkflowInput
     */
    'useMemoForDataAttributes'?: boolean;
    /**
     * 
     * @type {WorkflowConfig}
     * @memberof InterpreterWorkflowInput
     */
    'config'?: WorkflowConfig;
    /**
     * Indicates this is input for continueAsNew. When true, will ignore StartStateId, StateInput, StateOptions, InitSearchAttributes
     * @type {boolean}
     * @memberof InterpreterWorkflowInput
     */
    'isResumeFromContinueAsNew'?: boolean;
    /**
     * 
     * @type {ContinueAsNewInput}
     * @memberof InterpreterWorkflowInput
     */
    'continueAsNewInput'?: ContinueAsNewInput;
}
/**
 * 
 * @export
 * @interface InterpreterWorkflowOutput
 */
export interface InterpreterWorkflowOutput {
    /**
     * 
     * @type {Array<StateCompletionOutput>}
     * @memberof InterpreterWorkflowOutput
     */
    'stateCompletionOutputs'?: Array<StateCompletionOutput>;
}
/**
 * 
 * @export
 * @interface IwfEvent
 */
export interface IwfEvent {
    /**
     * 
     * @type {EventType}
     * @memberof IwfEvent
     */
    'eventType': EventType;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'workflowType': string;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'workflowRunId': string;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'stateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'stateExecutionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IwfEvent
     */
    'rpcName'?: string;
    /**
     * 
     * @type {number}
     * @memberof IwfEvent
     */
    'startTimestampInMs'?: number;
    /**
     * 
     * @type {number}
     * @memberof IwfEvent
     */
    'endTimestampInMs'?: number;
    /**
     * 
     * @type {IwfEventError}
     * @memberof IwfEvent
     */
    'error'?: IwfEventError;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof IwfEvent
     */
    'searchAttributes'?: Array<SearchAttribute>;
}


/**
 * 
 * @export
 * @interface IwfEventError
 */
export interface IwfEventError {
    /**
     * 
     * @type {string}
     * @memberof IwfEventError
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof IwfEventError
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface IwfHistoryEvent
 */
export interface IwfHistoryEvent {
    /**
     * 
     * @type {IwfHistoryEventType}
     * @memberof IwfHistoryEvent
     */
    'eventType'?: IwfHistoryEventType;
    /**
     * 
     * @type {StateWaitUntilDetails}
     * @memberof IwfHistoryEvent
     */
    'stateWaitUntil'?: StateWaitUntilDetails;
    /**
     * 
     * @type {StateExecuteDetails}
     * @memberof IwfHistoryEvent
     */
    'stateExecute'?: StateExecuteDetails;
    /**
     * 
     * @type {RpcExecutionDetails}
     * @memberof IwfHistoryEvent
     */
    'rpcExecution'?: RpcExecutionDetails;
    /**
     * 
     * @type {SignalReceivedDetails}
     * @memberof IwfHistoryEvent
     */
    'signalReceived'?: SignalReceivedDetails;
    /**
     * 
     * @type {WorkflowClosedDetails}
     * @memberof IwfHistoryEvent
     */
    'workflowClosed'?: WorkflowClosedDetails;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const IwfHistoryEventType = {
    StateWaitUntil: 'StateWaitUntil',
    StateExecute: 'StateExecute',
    RpcExecution: 'RpcExecution',
    SignalReceived: 'SignalReceived',
    WorkflowClosed: 'WorkflowClosed'
} as const;

export type IwfHistoryEventType = typeof IwfHistoryEventType[keyof typeof IwfHistoryEventType];


/**
 * 
 * @export
 * @interface KeyValue
 */
export interface KeyValue {
    /**
     * 
     * @type {string}
     * @memberof KeyValue
     */
    'key'?: string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof KeyValue
     */
    'value'?: EncodedObject;
}
/**
 * 
 * @export
 * @interface PersistenceLoadingPolicy
 */
export interface PersistenceLoadingPolicy {
    /**
     * 
     * @type {PersistenceLoadingType}
     * @memberof PersistenceLoadingPolicy
     */
    'persistenceLoadingType'?: PersistenceLoadingType;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersistenceLoadingPolicy
     */
    'partialLoadingKeys'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersistenceLoadingPolicy
     */
    'lockingKeys'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PersistenceLoadingPolicy
     */
    'useKeyAsPrefix'?: boolean;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const PersistenceLoadingType = {
    AllWithoutLocking: 'LOAD_ALL_WITHOUT_LOCKING',
    PartialWithoutLocking: 'LOAD_PARTIAL_WITHOUT_LOCKING',
    PartialWithExclusiveLock: 'LOAD_PARTIAL_WITH_EXCLUSIVE_LOCK',
    None: 'LOAD_NONE',
    AllWithPartialLock: 'LOAD_ALL_WITH_PARTIAL_LOCK'
} as const;

export type PersistenceLoadingType = typeof PersistenceLoadingType[keyof typeof PersistenceLoadingType];


/**
 * 
 * @export
 * @interface PrepareRpcQueryRequest
 */
export interface PrepareRpcQueryRequest {
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof PrepareRpcQueryRequest
     */
    'dataObjectsLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof PrepareRpcQueryRequest
     */
    'cachedDataObjectsLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof PrepareRpcQueryRequest
     */
    'searchAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
}
/**
 * 
 * @export
 * @interface PrepareRpcQueryResponse
 */
export interface PrepareRpcQueryResponse {
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof PrepareRpcQueryResponse
     */
    'dataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof PrepareRpcQueryResponse
     */
    'searchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {string}
     * @memberof PrepareRpcQueryResponse
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PrepareRpcQueryResponse
     */
    'workflowStartedTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrepareRpcQueryResponse
     */
    'iwfWorkflowType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrepareRpcQueryResponse
     */
    'iwfWorkerUrl'?: string;
    /**
     * 
     * @type {{ [key: string]: ChannelInfo; }}
     * @memberof PrepareRpcQueryResponse
     */
    'signalChannelInfo'?: { [key: string]: ChannelInfo; };
    /**
     * 
     * @type {{ [key: string]: ChannelInfo; }}
     * @memberof PrepareRpcQueryResponse
     */
    'internalChannelInfo'?: { [key: string]: ChannelInfo; };
}
/**
 * 
 * @export
 * @interface RetryPolicy
 */
export interface RetryPolicy {
    /**
     * 
     * @type {number}
     * @memberof RetryPolicy
     */
    'initialIntervalSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof RetryPolicy
     */
    'backoffCoefficient'?: number;
    /**
     * 
     * @type {number}
     * @memberof RetryPolicy
     */
    'maximumIntervalSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof RetryPolicy
     */
    'maximumAttempts'?: number;
    /**
     * 
     * @type {number}
     * @memberof RetryPolicy
     */
    'maximumAttemptsDurationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface RpcExecutionDetails
 */
export interface RpcExecutionDetails {
    /**
     * 
     * @type {ExecuteRpcSignalRequest}
     * @memberof RpcExecutionDetails
     */
    'response'?: ExecuteRpcSignalRequest;
    /**
     * 
     * @type {number}
     * @memberof RpcExecutionDetails
     */
    'completedTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface SearchAttribute
 */
export interface SearchAttribute {
    /**
     * 
     * @type {string}
     * @memberof SearchAttribute
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchAttribute
     */
    'stringValue'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchAttribute
     */
    'integerValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchAttribute
     */
    'doubleValue'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SearchAttribute
     */
    'boolValue'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchAttribute
     */
    'stringArrayValue'?: Array<string>;
    /**
     * 
     * @type {SearchAttributeValueType}
     * @memberof SearchAttribute
     */
    'valueType'?: SearchAttributeValueType;
}


/**
 * 
 * @export
 * @interface SearchAttributeKeyAndType
 */
export interface SearchAttributeKeyAndType {
    /**
     * 
     * @type {string}
     * @memberof SearchAttributeKeyAndType
     */
    'key'?: string;
    /**
     * 
     * @type {SearchAttributeValueType}
     * @memberof SearchAttributeKeyAndType
     */
    'valueType'?: SearchAttributeValueType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const SearchAttributeValueType = {
    Keyword: 'KEYWORD',
    Text: 'TEXT',
    Datetime: 'DATETIME',
    Int: 'INT',
    Double: 'DOUBLE',
    Bool: 'BOOL',
    KeywordArray: 'KEYWORD_ARRAY'
} as const;

export type SearchAttributeValueType = typeof SearchAttributeValueType[keyof typeof SearchAttributeValueType];


/**
 * 
 * @export
 * @interface SignalCommand
 */
export interface SignalCommand {
    /**
     * 
     * @type {string}
     * @memberof SignalCommand
     */
    'commandId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignalCommand
     */
    'signalChannelName': string;
    /**
     * 
     * @type {number}
     * @memberof SignalCommand
     */
    'atLeast'?: number;
    /**
     * 
     * @type {number}
     * @memberof SignalCommand
     */
    'atMost'?: number;
}
/**
 * 
 * @export
 * @interface SignalReceivedDetails
 */
export interface SignalReceivedDetails {
    /**
     * 
     * @type {string}
     * @memberof SignalReceivedDetails
     */
    'signalName'?: string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof SignalReceivedDetails
     */
    'value'?: EncodedObject;
    /**
     * 
     * @type {number}
     * @memberof SignalReceivedDetails
     */
    'completedTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface SignalResult
 */
export interface SignalResult {
    /**
     * 
     * @type {string}
     * @memberof SignalResult
     */
    'commandId': string;
    /**
     * 
     * @type {ChannelRequestStatus}
     * @memberof SignalResult
     */
    'signalRequestStatus': ChannelRequestStatus;
    /**
     * 
     * @type {string}
     * @memberof SignalResult
     */
    'signalChannelName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof SignalResult
     */
    'signalValue'?: EncodedObject;
}


/**
 * 
 * @export
 * @interface SkipTimerSignalRequest
 */
export interface SkipTimerSignalRequest {
    /**
     * 
     * @type {string}
     * @memberof SkipTimerSignalRequest
     */
    'stateExecutionId': string;
    /**
     * 
     * @type {string}
     * @memberof SkipTimerSignalRequest
     */
    'commandId': string;
    /**
     * 
     * @type {number}
     * @memberof SkipTimerSignalRequest
     */
    'commandIndex': number;
}
/**
 * 
 * @export
 * @interface StaleSkipTimerSignal
 */
export interface StaleSkipTimerSignal {
    /**
     * 
     * @type {string}
     * @memberof StaleSkipTimerSignal
     */
    'stateExecutionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StaleSkipTimerSignal
     */
    'timerCommandId'?: string;
    /**
     * 
     * @type {number}
     * @memberof StaleSkipTimerSignal
     */
    'timerCommandIndex'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StartApiFailurePolicy = {
    FailWorkflowOnStartApiFailure: 'FAIL_WORKFLOW_ON_START_API_FAILURE',
    ProceedToDecideOnStartApiFailure: 'PROCEED_TO_DECIDE_ON_START_API_FAILURE'
} as const;

export type StartApiFailurePolicy = typeof StartApiFailurePolicy[keyof typeof StartApiFailurePolicy];


/**
 * 
 * @export
 * @interface StateCompletionOutput
 */
export interface StateCompletionOutput {
    /**
     * 
     * @type {string}
     * @memberof StateCompletionOutput
     */
    'completedStateId': string;
    /**
     * 
     * @type {string}
     * @memberof StateCompletionOutput
     */
    'completedStateExecutionId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof StateCompletionOutput
     */
    'completedStateOutput'?: EncodedObject;
}
/**
 * 
 * @export
 * @interface StateDecideActivityInput
 */
export interface StateDecideActivityInput {
    /**
     * 
     * @type {string}
     * @memberof StateDecideActivityInput
     */
    'iwfWorkerUrl': string;
    /**
     * 
     * @type {WorkflowStateDecideRequest}
     * @memberof StateDecideActivityInput
     */
    'request': WorkflowStateDecideRequest;
}
/**
 * 
 * @export
 * @interface StateDecision
 */
export interface StateDecision {
    /**
     * 
     * @type {Array<StateMovement>}
     * @memberof StateDecision
     */
    'nextStates'?: Array<StateMovement>;
    /**
     * 
     * @type {WorkflowConditionalClose}
     * @memberof StateDecision
     */
    'conditionalClose'?: WorkflowConditionalClose;
}
/**
 * 
 * @export
 * @interface StateExecuteDetails
 */
export interface StateExecuteDetails {
    /**
     * 
     * @type {string}
     * @memberof StateExecuteDetails
     */
    'stateExecutionId': string;
    /**
     * 
     * @type {string}
     * @memberof StateExecuteDetails
     */
    'stateId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof StateExecuteDetails
     */
    'input'?: EncodedObject;
    /**
     * 
     * @type {number}
     * @memberof StateExecuteDetails
     */
    'fromEventId'?: number;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof StateExecuteDetails
     */
    'stateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {WorkflowStateDecideRequest}
     * @memberof StateExecuteDetails
     */
    'request'?: WorkflowStateDecideRequest;
    /**
     * 
     * @type {WorkflowStateDecideResponse}
     * @memberof StateExecuteDetails
     */
    'response'?: WorkflowStateDecideResponse;
    /**
     * 
     * @type {number}
     * @memberof StateExecuteDetails
     */
    'firstAttemptStartedTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateExecuteDetails
     */
    'completedAttemptStartedTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateExecuteDetails
     */
    'completedAttempt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateExecuteDetails
     */
    'completedTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof StateExecuteDetails
     */
    'activityId': string;
}
/**
 * 
 * @export
 * @interface StateExecutionCompletedCommands
 */
export interface StateExecutionCompletedCommands {
    /**
     * 
     * @type {{ [key: string]: InternalTimerStatus; }}
     * @memberof StateExecutionCompletedCommands
     */
    'completedTimerCommands'?: { [key: string]: InternalTimerStatus; };
    /**
     * 
     * @type {{ [key: string]: EncodedObject; }}
     * @memberof StateExecutionCompletedCommands
     */
    'completedSignalCommands'?: { [key: string]: EncodedObject; };
    /**
     * 
     * @type {{ [key: string]: EncodedObject; }}
     * @memberof StateExecutionCompletedCommands
     */
    'completedInterStateChannelCommands'?: { [key: string]: EncodedObject; };
}
/**
 * 
 * @export
 * @interface StateExecutionCounterInfo
 */
export interface StateExecutionCounterInfo {
    /**
     * for stateExecutionId
     * @type {{ [key: string]: number; }}
     * @memberof StateExecutionCounterInfo
     */
    'stateIdStartedCount'?: { [key: string]: number; };
    /**
     * for sys search attribute ExecutingStateIds
     * @type {{ [key: string]: number; }}
     * @memberof StateExecutionCounterInfo
     */
    'stateIdCurrentlyExecutingCount'?: { [key: string]: number; };
    /**
     * for dead end
     * @type {number}
     * @memberof StateExecutionCounterInfo
     */
    'totalCurrentlyExecutingCount'?: number;
}
/**
 * 
 * @export
 * @interface StateExecutionResumeInfo
 */
export interface StateExecutionResumeInfo {
    /**
     * 
     * @type {string}
     * @memberof StateExecutionResumeInfo
     */
    'stateExecutionId': string;
    /**
     * 
     * @type {StateMovement}
     * @memberof StateExecutionResumeInfo
     */
    'state': StateMovement;
    /**
     * 
     * @type {StateExecutionCompletedCommands}
     * @memberof StateExecutionResumeInfo
     */
    'stateExecutionCompletedCommands': StateExecutionCompletedCommands;
    /**
     * 
     * @type {CommandRequest}
     * @memberof StateExecutionResumeInfo
     */
    'commandRequest': CommandRequest;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof StateExecutionResumeInfo
     */
    'stateExecutionLocals': Array<KeyValue>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StateExecutionStatus = {
    Failure: 'Failure',
    WaitingCommands: 'WaitingCommands',
    Completed: 'Completed',
    ExecuteApiFailedAndProceed: 'ExecuteApiFailedAndProceed'
} as const;

export type StateExecutionStatus = typeof StateExecutionStatus[keyof typeof StateExecutionStatus];


/**
 * 
 * @export
 * @interface StateMovement
 */
export interface StateMovement {
    /**
     * 
     * @type {string}
     * @memberof StateMovement
     */
    'stateId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof StateMovement
     */
    'stateInput'?: EncodedObject;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof StateMovement
     */
    'stateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {string}
     * @memberof StateMovement
     */
    'waitForKey'?: string;
}
/**
 * 
 * @export
 * @interface StateStartActivityInput
 */
export interface StateStartActivityInput {
    /**
     * 
     * @type {string}
     * @memberof StateStartActivityInput
     */
    'IwfWorkerUrl': string;
    /**
     * 
     * @type {WorkflowStateStartRequest}
     * @memberof StateStartActivityInput
     */
    'Request': WorkflowStateStartRequest;
}
/**
 * 
 * @export
 * @interface StateWaitUntilDetails
 */
export interface StateWaitUntilDetails {
    /**
     * 
     * @type {string}
     * @memberof StateWaitUntilDetails
     */
    'stateExecutionId': string;
    /**
     * 
     * @type {string}
     * @memberof StateWaitUntilDetails
     */
    'stateId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof StateWaitUntilDetails
     */
    'input'?: EncodedObject;
    /**
     * 
     * @type {number}
     * @memberof StateWaitUntilDetails
     */
    'fromEventId'?: number;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof StateWaitUntilDetails
     */
    'stateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {WorkflowStateStartResponse}
     * @memberof StateWaitUntilDetails
     */
    'response'?: WorkflowStateStartResponse;
    /**
     * 
     * @type {number}
     * @memberof StateWaitUntilDetails
     */
    'firstAttemptStartedTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateWaitUntilDetails
     */
    'completedAttemptStartedTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateWaitUntilDetails
     */
    'completedAttempt'?: number;
    /**
     * 
     * @type {number}
     * @memberof StateWaitUntilDetails
     */
    'completedTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof StateWaitUntilDetails
     */
    'activityId': string;
}
/**
 * 
 * @export
 * @interface TimerCommand
 */
export interface TimerCommand {
    /**
     * 
     * @type {string}
     * @memberof TimerCommand
     */
    'commandId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TimerCommand
     */
    'firingUnixTimestampSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimerCommand
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface TimerInfo
 */
export interface TimerInfo {
    /**
     * 
     * @type {string}
     * @memberof TimerInfo
     */
    'commandId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TimerInfo
     */
    'firingUnixTimestampSeconds'?: number;
    /**
     * 
     * @type {InternalTimerStatus}
     * @memberof TimerInfo
     */
    'status'?: InternalTimerStatus;
}


/**
 * 
 * @export
 * @interface TimerResult
 */
export interface TimerResult {
    /**
     * 
     * @type {string}
     * @memberof TimerResult
     */
    'commandId': string;
    /**
     * 
     * @type {TimerStatus}
     * @memberof TimerResult
     */
    'timerStatus': TimerStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const TimerStatus = {
    Scheduled: 'SCHEDULED',
    Fired: 'FIRED'
} as const;

export type TimerStatus = typeof TimerStatus[keyof typeof TimerStatus];


/**
 * 
 * @export
 * @interface TriggerContinueAsNewRequest
 */
export interface TriggerContinueAsNewRequest {
    /**
     * 
     * @type {string}
     * @memberof TriggerContinueAsNewRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof TriggerContinueAsNewRequest
     */
    'workflowRunId'?: string;
}
/**
 * 
 * @export
 * @interface WaitForStateCompletionWorkflowOutput
 */
export interface WaitForStateCompletionWorkflowOutput {
    /**
     * 
     * @type {StateCompletionOutput}
     * @memberof WaitForStateCompletionWorkflowOutput
     */
    'stateCompletionOutput'?: StateCompletionOutput;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WaitUntilApiFailurePolicy = {
    FailWorkflowOnFailure: 'FAIL_WORKFLOW_ON_FAILURE',
    ProceedOnFailure: 'PROCEED_ON_FAILURE'
} as const;

export type WaitUntilApiFailurePolicy = typeof WaitUntilApiFailurePolicy[keyof typeof WaitUntilApiFailurePolicy];


/**
 * 
 * @export
 * @interface WorkerErrorResponse
 */
export interface WorkerErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkerErrorResponse
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkerErrorResponse
     */
    'errorType'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowAlreadyStartedOptions
 */
export interface WorkflowAlreadyStartedOptions {
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowAlreadyStartedOptions
     */
    'ignoreAlreadyStartedError': boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowAlreadyStartedOptions
     */
    'requestId'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowClosedDetails
 */
export interface WorkflowClosedDetails {
    /**
     * 
     * @type {number}
     * @memberof WorkflowClosedDetails
     */
    'workflowClosedTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface WorkflowConditionalClose
 */
export interface WorkflowConditionalClose {
    /**
     * 
     * @type {WorkflowConditionalCloseType}
     * @memberof WorkflowConditionalClose
     */
    'conditionalCloseType'?: WorkflowConditionalCloseType;
    /**
     * 
     * @type {string}
     * @memberof WorkflowConditionalClose
     */
    'channelName'?: string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowConditionalClose
     */
    'closeInput'?: EncodedObject;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowConditionalCloseType = {
    ForceCompleteOnInternalChannelEmpty: 'FORCE_COMPLETE_ON_INTERNAL_CHANNEL_EMPTY',
    ForceCompleteOnSignalChannelEmpty: 'FORCE_COMPLETE_ON_SIGNAL_CHANNEL_EMPTY',
    GracefulCompleteOnAllChannelsEmpty: 'GRACEFUL_COMPLETE_ON_ALL_CHANNELS_EMPTY'
} as const;

export type WorkflowConditionalCloseType = typeof WorkflowConditionalCloseType[keyof typeof WorkflowConditionalCloseType];


/**
 * 
 * @export
 * @interface WorkflowConfig
 */
export interface WorkflowConfig {
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowConfig
     */
    'disableSystemSearchAttribute'?: boolean;
    /**
     * 
     * @type {ExecutingStateIdMode}
     * @memberof WorkflowConfig
     */
    'executingStateIdMode'?: ExecutingStateIdMode;
    /**
     * 
     * @type {number}
     * @memberof WorkflowConfig
     */
    'continueAsNewThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowConfig
     */
    'continueAsNewPageSizeInBytes'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowConfig
     */
    'optimizeActivity'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowConfig
     */
    'optimizeTimer'?: boolean;
}


/**
 * 
 * @export
 * @interface WorkflowConfigUpdateRequest
 */
export interface WorkflowConfigUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowConfigUpdateRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowConfigUpdateRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {WorkflowConfig}
     * @memberof WorkflowConfigUpdateRequest
     */
    'workflowConfig': WorkflowConfig;
}
/**
 * 
 * @export
 * @interface WorkflowDumpRequest
 */
export interface WorkflowDumpRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowDumpRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDumpRequest
     */
    'workflowRunId': string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowDumpRequest
     */
    'pageSizeInBytes': number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowDumpRequest
     */
    'pageNum': number;
}
/**
 * 
 * @export
 * @interface WorkflowDumpResponse
 */
export interface WorkflowDumpResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowDumpResponse
     */
    'checksum': string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowDumpResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowDumpResponse
     */
    'jsonData': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowErrorType = {
    StateDecisionFailingWorkflowErrorType: 'STATE_DECISION_FAILING_WORKFLOW_ERROR_TYPE',
    ClientApiFailingWorkflowErrorType: 'CLIENT_API_FAILING_WORKFLOW_ERROR_TYPE',
    StateApiFailErrorType: 'STATE_API_FAIL_ERROR_TYPE',
    InvalidUserWorkflowCodeErrorType: 'INVALID_USER_WORKFLOW_CODE_ERROR_TYPE',
    RpcAcquireLockFailure: 'RPC_ACQUIRE_LOCK_FAILURE',
    ServerInternalErrorType: 'SERVER_INTERNAL_ERROR_TYPE'
} as const;

export type WorkflowErrorType = typeof WorkflowErrorType[keyof typeof WorkflowErrorType];


/**
 * 
 * @export
 * @interface WorkflowGetDataObjectsRequest
 */
export interface WorkflowGetDataObjectsRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetDataObjectsRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetDataObjectsRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowGetDataObjectsRequest
     */
    'keys'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowGetDataObjectsRequest
     */
    'useMemoForDataAttributes'?: boolean;
}
/**
 * 
 * @export
 * @interface WorkflowGetDataObjectsResponse
 */
export interface WorkflowGetDataObjectsResponse {
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowGetDataObjectsResponse
     */
    'objects'?: Array<KeyValue>;
}
/**
 * 
 * @export
 * @interface WorkflowGetRequest
 */
export interface WorkflowGetRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowGetRequest
     */
    'needsResults'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkflowGetRequest
     */
    'waitTimeSeconds'?: number;
}
/**
 * 
 * @export
 * @interface WorkflowGetResponse
 */
export interface WorkflowGetResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetResponse
     */
    'workflowRunId': string;
    /**
     * 
     * @type {WorkflowStatus}
     * @memberof WorkflowGetResponse
     */
    'workflowStatus': WorkflowStatus;
    /**
     * 
     * @type {Array<StateCompletionOutput>}
     * @memberof WorkflowGetResponse
     */
    'results'?: Array<StateCompletionOutput>;
    /**
     * 
     * @type {WorkflowErrorType}
     * @memberof WorkflowGetResponse
     */
    'errorType'?: WorkflowErrorType;
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetResponse
     */
    'errorMessage'?: string;
}


/**
 * 
 * @export
 * @interface WorkflowGetSearchAttributesRequest
 */
export interface WorkflowGetSearchAttributesRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetSearchAttributesRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowGetSearchAttributesRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {Array<SearchAttributeKeyAndType>}
     * @memberof WorkflowGetSearchAttributesRequest
     */
    'keys'?: Array<SearchAttributeKeyAndType>;
}
/**
 * 
 * @export
 * @interface WorkflowGetSearchAttributesResponse
 */
export interface WorkflowGetSearchAttributesResponse {
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowGetSearchAttributesResponse
     */
    'searchAttributes'?: Array<SearchAttribute>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowIDReusePolicy = {
    AllowDuplicateFailedOnly: 'ALLOW_DUPLICATE_FAILED_ONLY',
    AllowDuplicate: 'ALLOW_DUPLICATE',
    RejectDuplicate: 'REJECT_DUPLICATE',
    TerminateIfRunning: 'TERMINATE_IF_RUNNING'
} as const;

export type WorkflowIDReusePolicy = typeof WorkflowIDReusePolicy[keyof typeof WorkflowIDReusePolicy];


/**
 * 
 * @export
 * @interface WorkflowResetRequest
 */
export interface WorkflowResetRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {WorkflowResetType}
     * @memberof WorkflowResetRequest
     */
    'resetType': WorkflowResetType;
    /**
     * 
     * @type {number}
     * @memberof WorkflowResetRequest
     */
    'historyEventId'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'historyEventTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'stateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetRequest
     */
    'stateExecutionId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowResetRequest
     */
    'skipSignalReapply'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowResetRequest
     */
    'skipUpdateReapply'?: boolean;
}


/**
 * 
 * @export
 * @interface WorkflowResetResponse
 */
export interface WorkflowResetResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowResetResponse
     */
    'workflowRunId': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowResetType = {
    HistoryEventId: 'HISTORY_EVENT_ID',
    Beginning: 'BEGINNING',
    HistoryEventTime: 'HISTORY_EVENT_TIME',
    StateId: 'STATE_ID',
    StateExecutionId: 'STATE_EXECUTION_ID'
} as const;

export type WorkflowResetType = typeof WorkflowResetType[keyof typeof WorkflowResetType];


/**
 * 
 * @export
 * @interface WorkflowRetryPolicy
 */
export interface WorkflowRetryPolicy {
    /**
     * 
     * @type {number}
     * @memberof WorkflowRetryPolicy
     */
    'initialIntervalSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowRetryPolicy
     */
    'backoffCoefficient'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowRetryPolicy
     */
    'maximumIntervalSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowRetryPolicy
     */
    'maximumAttempts'?: number;
}
/**
 * 
 * @export
 * @interface WorkflowRpcRequest
 */
export interface WorkflowRpcRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowRpcRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowRpcRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowRpcRequest
     */
    'rpcName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowRpcRequest
     */
    'input'?: EncodedObject;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowRpcRequest
     */
    'searchAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowRpcRequest
     */
    'dataAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {number}
     * @memberof WorkflowRpcRequest
     */
    'timeoutSeconds'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowRpcRequest
     */
    'useMemoForDataAttributes'?: boolean;
    /**
     * 
     * @type {Array<SearchAttributeKeyAndType>}
     * @memberof WorkflowRpcRequest
     */
    'searchAttributes'?: Array<SearchAttributeKeyAndType>;
}
/**
 * 
 * @export
 * @interface WorkflowRpcResponse
 */
export interface WorkflowRpcResponse {
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowRpcResponse
     */
    'output'?: EncodedObject;
}
/**
 * 
 * @export
 * @interface WorkflowSearchRequest
 */
export interface WorkflowSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchRequest
     */
    'query': string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSearchRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchRequest
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowSearchResponse
 */
export interface WorkflowSearchResponse {
    /**
     * 
     * @type {Array<WorkflowSearchResponseEntry>}
     * @memberof WorkflowSearchResponse
     */
    'workflowExecutions'?: Array<WorkflowSearchResponseEntry>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowSearchResponseEntry
 */
export interface WorkflowSearchResponseEntry {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchResponseEntry
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchResponseEntry
     */
    'workflowRunId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchResponseEntry
     */
    'workflowType'?: string;
    /**
     * 
     * @type {WorkflowStatus}
     * @memberof WorkflowSearchResponseEntry
     */
    'workflowStatus'?: WorkflowStatus;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSearchResponseEntry
     */
    'historySizeInBytes'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSearchResponseEntry
     */
    'historyLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSearchResponseEntry
     */
    'startTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSearchResponseEntry
     */
    'closeTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSearchResponseEntry
     */
    'taskQueue'?: string;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowSearchResponseEntry
     */
    'customSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowSearchResponseEntry
     */
    'customTags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowSearchResponseEntry
     */
    'isIwf'?: boolean;
}


/**
 * 
 * @export
 * @interface WorkflowSetDataObjectsRequest
 */
export interface WorkflowSetDataObjectsRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSetDataObjectsRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSetDataObjectsRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowSetDataObjectsRequest
     */
    'objects'?: Array<KeyValue>;
}
/**
 * 
 * @export
 * @interface WorkflowSetSearchAttributesRequest
 */
export interface WorkflowSetSearchAttributesRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSetSearchAttributesRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSetSearchAttributesRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowSetSearchAttributesRequest
     */
    'searchAttributes'?: Array<SearchAttribute>;
}
/**
 * 
 * @export
 * @interface WorkflowShowRequest
 */
export interface WorkflowShowRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowShowRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowShowRequest
     */
    'runId'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowShowResponse
 */
export interface WorkflowShowResponse {
    /**
     * 
     * @type {number}
     * @memberof WorkflowShowResponse
     */
    'workflowStartedTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowShowResponse
     */
    'workflowType'?: string;
    /**
     * 
     * @type {InterpreterWorkflowInput}
     * @memberof WorkflowShowResponse
     */
    'input': InterpreterWorkflowInput;
    /**
     * 
     * @type {ContinueAsNewDumpResponse}
     * @memberof WorkflowShowResponse
     */
    'continueAsNewSnapshot'?: ContinueAsNewDumpResponse;
    /**
     * 
     * @type {WorkflowStatus}
     * @memberof WorkflowShowResponse
     */
    'status'?: WorkflowStatus;
    /**
     * 
     * @type {Array<IwfHistoryEvent>}
     * @memberof WorkflowShowResponse
     */
    'historyEvents'?: Array<IwfHistoryEvent>;
}


/**
 * 
 * @export
 * @interface WorkflowSignalRequest
 */
export interface WorkflowSignalRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSignalRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSignalRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSignalRequest
     */
    'signalChannelName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowSignalRequest
     */
    'signalValue'?: EncodedObject;
}
/**
 * 
 * @export
 * @interface WorkflowSkipTimerRequest
 */
export interface WorkflowSkipTimerRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowSkipTimerRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSkipTimerRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSkipTimerRequest
     */
    'workflowStateExecutionId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowSkipTimerRequest
     */
    'timerCommandId'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowSkipTimerRequest
     */
    'timerCommandIndex'?: number;
}
/**
 * 
 * @export
 * @interface WorkflowStartOptions
 */
export interface WorkflowStartOptions {
    /**
     * 
     * @type {WorkflowIDReusePolicy}
     * @memberof WorkflowStartOptions
     */
    'workflowIDReusePolicy'?: WorkflowIDReusePolicy;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartOptions
     */
    'cronSchedule'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStartOptions
     */
    'workflowStartDelaySeconds'?: number;
    /**
     * 
     * @type {WorkflowRetryPolicy}
     * @memberof WorkflowStartOptions
     */
    'retryPolicy'?: WorkflowRetryPolicy;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowStartOptions
     */
    'searchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStartOptions
     */
    'dataAttributes'?: Array<KeyValue>;
    /**
     * 
     * @type {WorkflowConfig}
     * @memberof WorkflowStartOptions
     */
    'workflowConfigOverride'?: WorkflowConfig;
    /**
     * 
     * @type {IDReusePolicy}
     * @memberof WorkflowStartOptions
     */
    'idReusePolicy'?: IDReusePolicy;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowStartOptions
     */
    'useMemoForDataAttributes'?: boolean;
    /**
     * 
     * @type {WorkflowAlreadyStartedOptions}
     * @memberof WorkflowStartOptions
     */
    'workflowAlreadyStartedOptions'?: WorkflowAlreadyStartedOptions;
}


/**
 * 
 * @export
 * @interface WorkflowStartRequest
 */
export interface WorkflowStartRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartRequest
     */
    'iwfWorkflowType': string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStartRequest
     */
    'workflowTimeoutSeconds': number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartRequest
     */
    'iwfWorkerUrl': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartRequest
     */
    'startStateId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowStartRequest
     */
    'waitForCompletionStateIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowStartRequest
     */
    'waitForCompletionStateExecutionIds'?: Array<string>;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowStartRequest
     */
    'stateInput'?: EncodedObject;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof WorkflowStartRequest
     */
    'stateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {WorkflowStartOptions}
     * @memberof WorkflowStartRequest
     */
    'workflowStartOptions'?: WorkflowStartOptions;
}
/**
 * 
 * @export
 * @interface WorkflowStartResponse
 */
export interface WorkflowStartResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStartResponse
     */
    'workflowRunId'?: string;
}
/**
 * 
 * @export
 * @interface WorkflowStateDecideRequest
 */
export interface WorkflowStateDecideRequest {
    /**
     * 
     * @type {Context}
     * @memberof WorkflowStateDecideRequest
     */
    'context': Context;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateDecideRequest
     */
    'workflowType': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateDecideRequest
     */
    'workflowStateId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowStateDecideRequest
     */
    'stateInput'?: EncodedObject;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowStateDecideRequest
     */
    'searchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateDecideRequest
     */
    'DataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateDecideRequest
     */
    'stateLocals'?: Array<KeyValue>;
    /**
     * 
     * @type {CommandResults}
     * @memberof WorkflowStateDecideRequest
     */
    'commandResults'?: CommandResults;
}
/**
 * 
 * @export
 * @interface WorkflowStateDecideResponse
 */
export interface WorkflowStateDecideResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateDecideResponse
     */
    'localActivityInput'?: string;
    /**
     * 
     * @type {StateDecision}
     * @memberof WorkflowStateDecideResponse
     */
    'stateDecision'?: StateDecision;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowStateDecideResponse
     */
    'upsertSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateDecideResponse
     */
    'upsertDataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateDecideResponse
     */
    'recordEvents'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateDecideResponse
     */
    'upsertStateLocals'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<InterStateChannelPublishing>}
     * @memberof WorkflowStateDecideResponse
     */
    'publishToInterStateChannel'?: Array<InterStateChannelPublishing>;
}
/**
 * 
 * @export
 * @interface WorkflowStateOptions
 */
export interface WorkflowStateOptions {
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'searchAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'waitUntilApiSearchAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'executeApiSearchAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'dataObjectsLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStateOptions
     */
    'startApiTimeoutSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStateOptions
     */
    'decideApiTimeoutSeconds'?: number;
    /**
     * 
     * @type {RetryPolicy}
     * @memberof WorkflowStateOptions
     */
    'startApiRetryPolicy'?: RetryPolicy;
    /**
     * 
     * @type {RetryPolicy}
     * @memberof WorkflowStateOptions
     */
    'decideApiRetryPolicy'?: RetryPolicy;
    /**
     * 
     * @type {StartApiFailurePolicy}
     * @memberof WorkflowStateOptions
     */
    'startApiFailurePolicy'?: StartApiFailurePolicy;
    /**
     * 
     * @type {ExecuteApiFailurePolicy}
     * @memberof WorkflowStateOptions
     */
    'executeApiFailurePolicy'?: ExecuteApiFailurePolicy;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateOptions
     */
    'executeApiFailureProceedStateId'?: string;
    /**
     * 
     * @type {WorkflowStateOptions}
     * @memberof WorkflowStateOptions
     */
    'executeApiFailureProceedStateOptions'?: WorkflowStateOptions;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowStateOptions
     */
    'skipStartApi'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStateOptions
     */
    'waitUntilApiTimeoutSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowStateOptions
     */
    'executeApiTimeoutSeconds'?: number;
    /**
     * 
     * @type {RetryPolicy}
     * @memberof WorkflowStateOptions
     */
    'waitUntilApiRetryPolicy'?: RetryPolicy;
    /**
     * 
     * @type {RetryPolicy}
     * @memberof WorkflowStateOptions
     */
    'executeApiRetryPolicy'?: RetryPolicy;
    /**
     * 
     * @type {WaitUntilApiFailurePolicy}
     * @memberof WorkflowStateOptions
     */
    'waitUntilApiFailurePolicy'?: WaitUntilApiFailurePolicy;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowStateOptions
     */
    'skipWaitUntil'?: boolean;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'dataAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'waitUntilApiDataAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
    /**
     * 
     * @type {PersistenceLoadingPolicy}
     * @memberof WorkflowStateOptions
     */
    'executeApiDataAttributesLoadingPolicy'?: PersistenceLoadingPolicy;
}


/**
 * 
 * @export
 * @interface WorkflowStateStartRequest
 */
export interface WorkflowStateStartRequest {
    /**
     * 
     * @type {Context}
     * @memberof WorkflowStateStartRequest
     */
    'context': Context;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateStartRequest
     */
    'workflowType': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateStartRequest
     */
    'workflowStateId': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowStateStartRequest
     */
    'stateInput'?: EncodedObject;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowStateStartRequest
     */
    'searchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateStartRequest
     */
    'dataObjects'?: Array<KeyValue>;
}
/**
 * 
 * @export
 * @interface WorkflowStateStartResponse
 */
export interface WorkflowStateStartResponse {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStateStartResponse
     */
    'localActivityInput'?: string;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowStateStartResponse
     */
    'upsertSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateStartResponse
     */
    'upsertDataObjects'?: Array<KeyValue>;
    /**
     * 
     * @type {CommandRequest}
     * @memberof WorkflowStateStartResponse
     */
    'commandRequest'?: CommandRequest;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateStartResponse
     */
    'upsertStateLocals'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowStateStartResponse
     */
    'recordEvents'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<InterStateChannelPublishing>}
     * @memberof WorkflowStateStartResponse
     */
    'publishToInterStateChannel'?: Array<InterStateChannelPublishing>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowStatus = {
    Running: 'RUNNING',
    Completed: 'COMPLETED',
    Failed: 'FAILED',
    Timeout: 'TIMEOUT',
    Terminated: 'TERMINATED',
    Canceled: 'CANCELED',
    ContinuedAsNew: 'CONTINUED_AS_NEW'
} as const;

export type WorkflowStatus = typeof WorkflowStatus[keyof typeof WorkflowStatus];


/**
 * 
 * @export
 * @interface WorkflowStopRequest
 */
export interface WorkflowStopRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowStopRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStopRequest
     */
    'workflowRunId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowStopRequest
     */
    'reason'?: string;
    /**
     * 
     * @type {WorkflowStopType}
     * @memberof WorkflowStopRequest
     */
    'stopType'?: WorkflowStopType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const WorkflowStopType = {
    Cancel: 'CANCEL',
    Terminate: 'TERMINATE',
    Fail: 'FAIL'
} as const;

export type WorkflowStopType = typeof WorkflowStopType[keyof typeof WorkflowStopType];


/**
 * 
 * @export
 * @interface WorkflowWaitForStateCompletionRequest
 */
export interface WorkflowWaitForStateCompletionRequest {
    /**
     * 
     * @type {string}
     * @memberof WorkflowWaitForStateCompletionRequest
     */
    'workflowId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowWaitForStateCompletionRequest
     */
    'stateExecutionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowWaitForStateCompletionRequest
     */
    'stateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowWaitForStateCompletionRequest
     */
    'waitForKey'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowWaitForStateCompletionRequest
     */
    'waitTimeSeconds'?: number;
}
/**
 * 
 * @export
 * @interface WorkflowWaitForStateCompletionResponse
 */
export interface WorkflowWaitForStateCompletionResponse {
    /**
     * 
     * @type {StateCompletionOutput}
     * @memberof WorkflowWaitForStateCompletionResponse
     */
    'stateCompletionOutput'?: StateCompletionOutput;
}
/**
 * 
 * @export
 * @interface WorkflowWorkerRpcRequest
 */
export interface WorkflowWorkerRpcRequest {
    /**
     * 
     * @type {Context}
     * @memberof WorkflowWorkerRpcRequest
     */
    'context': Context;
    /**
     * 
     * @type {string}
     * @memberof WorkflowWorkerRpcRequest
     */
    'workflowType': string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowWorkerRpcRequest
     */
    'rpcName': string;
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowWorkerRpcRequest
     */
    'input'?: EncodedObject;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowWorkerRpcRequest
     */
    'searchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowWorkerRpcRequest
     */
    'dataAttributes'?: Array<KeyValue>;
    /**
     * 
     * @type {{ [key: string]: ChannelInfo; }}
     * @memberof WorkflowWorkerRpcRequest
     */
    'signalChannelInfos'?: { [key: string]: ChannelInfo; };
    /**
     * 
     * @type {{ [key: string]: ChannelInfo; }}
     * @memberof WorkflowWorkerRpcRequest
     */
    'internalChannelInfos'?: { [key: string]: ChannelInfo; };
}
/**
 * 
 * @export
 * @interface WorkflowWorkerRpcResponse
 */
export interface WorkflowWorkerRpcResponse {
    /**
     * 
     * @type {EncodedObject}
     * @memberof WorkflowWorkerRpcResponse
     */
    'output'?: EncodedObject;
    /**
     * 
     * @type {StateDecision}
     * @memberof WorkflowWorkerRpcResponse
     */
    'stateDecision'?: StateDecision;
    /**
     * 
     * @type {Array<SearchAttribute>}
     * @memberof WorkflowWorkerRpcResponse
     */
    'upsertSearchAttributes'?: Array<SearchAttribute>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowWorkerRpcResponse
     */
    'upsertDataAttributes'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowWorkerRpcResponse
     */
    'recordEvents'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<KeyValue>}
     * @memberof WorkflowWorkerRpcResponse
     */
    'upsertStateLocals'?: Array<KeyValue>;
    /**
     * 
     * @type {Array<InterStateChannelPublishing>}
     * @memberof WorkflowWorkerRpcResponse
     */
    'publishToInterStateChannel'?: Array<InterStateChannelPublishing>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary search for workflows by a search attribute query
         * @param {WorkflowSearchRequest} [workflowSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkflowSearchPost: async (workflowSearchRequest?: WorkflowSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflow/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary show details for a workflow execution
         * @param {WorkflowShowRequest} [workflowShowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkflowShowPost: async (workflowShowRequest?: WorkflowShowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflow/show`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workflowShowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary search for workflows by a search attribute query
         * @param {WorkflowSearchRequest} [workflowSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkflowSearchPost(workflowSearchRequest?: WorkflowSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkflowSearchPost(workflowSearchRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.apiV1WorkflowSearchPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary show details for a workflow execution
         * @param {WorkflowShowRequest} [workflowShowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkflowShowPost(workflowShowRequest?: WorkflowShowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowShowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkflowShowPost(workflowShowRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.apiV1WorkflowShowPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary search for workflows by a search attribute query
         * @param {WorkflowSearchRequest} [workflowSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkflowSearchPost(workflowSearchRequest?: WorkflowSearchRequest, options?: any): AxiosPromise<WorkflowSearchResponse> {
            return localVarFp.apiV1WorkflowSearchPost(workflowSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary show details for a workflow execution
         * @param {WorkflowShowRequest} [workflowShowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkflowShowPost(workflowShowRequest?: WorkflowShowRequest, options?: any): AxiosPromise<WorkflowShowResponse> {
            return localVarFp.apiV1WorkflowShowPost(workflowShowRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary search for workflows by a search attribute query
     * @param {WorkflowSearchRequest} [workflowSearchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkflowSearchPost(workflowSearchRequest?: WorkflowSearchRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkflowSearchPost(workflowSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary show details for a workflow execution
     * @param {WorkflowShowRequest} [workflowShowRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkflowShowPost(workflowShowRequest?: WorkflowShowRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkflowShowPost(workflowShowRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



